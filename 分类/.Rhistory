demo()
data("iris")
data()
clear
View(iris)
View(iris)
sample_index <- sample(1: nrow(iris), 10 , replace = T)
sample_index
sample_set <- iris[sample_index,]
sample_set
setwd("~/Documents/Workspace/R")
df <- data.frame("Address 1"=character(0), direction=character(0),street=character(0),CrossStreet=character(0),intersection=character(0), Location.1=character(0))
names(df)
names(df) <- tolower(names(df))# convert to all lower case
names(df)
splitnames <- strsplit(names(df), "\\.")
class(splitnames)
length(splitnames)
splitnames[1]
splitnames
splitnames[[1]]
splitnames[[6]][1]
splitnames[[6]][2]
firstelement <- function(x){x[1]}
names(df) <- sapply(splitnames, firstelement)
names(df)
airquality$Ozone[1:10]
ozonRanges <- cut(airquality$Ozone, seq(0, 200, by=25))
ozonRanges[1:10]
class(ozonRanges)
table(ozonRanges, useNA = 'ifany')
airquality$ozoneRanges <- ozoneRanges
head(airquality)
data("iris")
buckets <- 10
maxSepLen <- max(iris$Sepal.Length)
minSepLen <- min(iris$Sepal.Length)
cutPoints <- seq(minSepLen, maxSepLen, by=(maxSepLen - minSepLen)/buckets)
cutPoints
cutSepLen <- cut(iris$Sepal.Length, breaks = cutPoints, include.lowest = TRUE)
newiris <- data.frame(contSepLen=iris$Sepal.Length, discSepLen=cutSepLen)
head(newiris)
library(lubridate)
library(lubridate)
install.packages(lubridate)
install.packages("lubridate")
library(lubridate)
data("lakers")
data("lakers")
df <- lakers
str(df$date)
playdate <- df$date[1]
playtime <- df$time[1]
playdatetime <- parse(playdate, playtime)
playdatetime <- paste(playdate, playtime)
playdatetime <- parse_date_time(playdatetime, "%y-%m-%d %H.%M")
playdatetime
class(playdatetime)
df$date <- ymd(df$date)
str(df$date)
class(df$date)
df$PlayDateTime <- parse_date_time(paste(df$date, df$time), "%y-%m-%d %H.%M")
str(df$PlayDateTime)
library(e1071)
install.packages("e1071")
library(e1071)
iris_missing_data <- iris
iris_missing_data[5,1] < NA
iris_missing_data[7,3] < NA
iris_missing_data[10, 4] < NA
iris_missing_data[1:10, -5] < NA
iris_missing_data[1:10, 0] < NA
iris_missing_data[1:10] < NA
iris_missing_data[1:10, 5] < NA
View(iris_missing_data)
library(e1071)
iris_missing_data <- iris
iris_missing_data[5:1] < NA
iris_missing_data[5:1] <= NA
iris_missing_data[5:1] <- NA
library(e1071)
iris_missing_data <- iris
iris_missing_data[5:1] <- NA
iris_missing_data[7:3] <- NA
iris_missing_data[10:4] <- NA
iris_missing_data[1:10:-5]
iris_missing_data[1:10,-5]
View(iris_missing_data)
library(e1071)
iris_missing_data <- iris
View(iris_missing_data)
iris_missing_data[5,1] <- NA
iris_missing_data[7,3] <- NA
iris_missing_data[10,4] <- NA
iris_missing_data[1:10,-5]
irrs_repaired <- impute(iris_missing_data[, 1:4], what="mean")
irrs_repaired <- data.frame(irrs_repaired)
irrs_repaired[1:10, -5]
df <- iris_missing_data
nrow(df)
iris_trimmed <- df[complete.cases(df[,1:4]),]
nrow(iris_trimmed)
df.has.na <- apply(df, 1, function(x){any(is.na(x))})
sum(df.has.na)
iris_trimmed <- df[!df.has.na]
iris_trimmed <- df[!df.has.na,]
setwd("~/Documents/Workspace/R")
clear
head(scaleiris)
head(iris)
scaleiris <- scale(iris[, 1:4])
head(scaleiris)
cor(iris[,-5])
iris_pca <- prcomp(iris[, -5], scale=T)
summary(iris_pca)
plot(iris_pca)
iris_pca$rotation
predict(iris_pca)[1:2,]
biplot(iris_pca)
summary(iris_pca)
iris_pca$rotation
plot(iris_pca)
biplot(iris_pca)
hist(iris$Sepal.Length)
hist(iris$Sepal.Length, probability = TRUE, breaks = 10)
lines(density(iris$Sepal.Length))
# 2. 箱型图
boxplot(airquality$Ozone, col = "blue")
boxplot(ToothGrowth$len ~ as.factor(ToothGrowth$supp), col="blue")
boxplot(ToothGrowth$len ~ as.factor(ToothGrowth$supp), col=c("blue", "orange"), varwidth=TRUE)
barplot(table(airquality$Temp), col="blue")
temp_dens <- density(airquality$Temp)
plot(temp_dens, lwd=3, col="blue")
plot(ToothGrowth$len, ToothGrowth$dose,pch=19, col="blue")
plot(ToothGrowth$len, ToothGrowth$dose,pch=ifelse(ToothGrowth$supp == "VC", 0, 1), col="blue")
install.packages("scatterplot3d")
install.packages("scatterplot3d")
library("scatterplot3d")
scatterplot3d(airquality$Solar.R, airquality$Wind, airquality$Temp, highlight.3d = True, col.axis = "blue",
col.grid = "lightblue", main = "Air Quality Data Set", pch=20, xlab = "Solar Radiation",
ylab = "Wind", zlab = "Temp")
scatterplot3d(airquality$Solar.R, airquality$Wind, airquality$Temp, highlight.3d = TRUE, col.axis = "blue",
col.grid = "lightblue", main = "Air Quality Data Set", pch=20, xlab = "Solar Radiation",
ylab = "Wind", zlab = "Temp")
cor(iris[, c(1,2,3,4)], method = "pearson")
pairs(iris[, c(1,2,3,4)])
x <- rnorm(1e5)
y <- rnorm(1e5)
plot(x, y, pch=16)
sampledSubset <- sample(1: 1e5, size = 1000, replace = FALSE)
plot(x[sampledSubset], y[sampledSubset], pch=16)
smoothScatter(x, y)
install.packages("hexbin")
install.packages("hexbin")
library(hexbin)
hbins <- hexbin(x,y)
plot(hbins)
x <- rnorm(50)
y <- rnorm(50)
qqplot(x, y)
abline(c(0,1))
# 7. 热图
# image()
image(1:150, 1:4, as.matrix(iris[1:150, 1:4]))
transMatrix <- as.matrix(iris[1:150, 1:4])
transMatrix <- t(transMatrix)[,nrow(transMatrix):1]
image(1:150, 1:4, transMatrix)
image(1:4, 1:150,transMatrix)
par(mfrow=c(1,2))
hist(airquality$Ozone, xlab = "Ozone (ppb)", col = "blue", main="Ozone Frequencies")
plot(airquality$Ozone, airquality$Temp, pch=16, col="blue", cex=1.25, xlab="Ozone (ppb)",
ylab="Temperature (degrees F)", main="Air Quality - Ozone vs. Temp", cex.axis=1.5)
legend(125, 60, legend = "May-Sep 1973", col = "blue", pch = 16, cex=1.0)
install.packages("MASS")
install.packages("car")
setwd("~/Documents/Workspace/R/回归")
library(MASS)
data(Boston)
names(Boston)
lml <- lm(medv~rm, data=Boston)
lml
summary(lml)
names(lml)
coef(lml)
attach(Boston)
plot(rm, medv, pch=20, xlab="AVG. # Rooms", ylab="Median Value")
lines(rm, lml$fitted, lwd=3)
newdata <- data.frame(rm=6)
predict(lml, newdata)
## 预测
## 方法 1
coef(lml)[1] + coef(lml)[2]*6
par(mfrow=c(2,2))
plot(lml)
par(mfrow=c(1,1))
plot(cooks.distance(lml))
par(mfrow=c(1,1))
plot(predict(lmml), residuals(lml))
plot(predict(lml), residuals(lml))
library(car)
data(Prestige)
summary(Prestige)
head(Prestige)
plot(trainPrestige$prestige, trainPrestige$education) # Trend
Prestige_noNa <- na.omit(Prestige)
n <- nrow(Prestige_noNa) # number for observatios
ntrain <- round(n*0.6)
set.seed(333) # set seed for reproducible results
tindex <- sample(n, ntrain)
trainPrestige <- Prestige_noNa[tindex,]
testPrestige <- Prestige_noNa[-tindex,]
plot(trainPrestige$prestige, trainPrestige$education) # Trend
plot(trainPrestige$prestige, trainPrestige$income)
plot(trainPrestige$prestige, trainPrestige$women)
lm2 <- lm(presidents~., data = trainPrestige)
summary(lm2)
lm2 <- lm(presidents~., data = trainPrestige)
summary(lm2)
lm2 <- lm(prestige~., data = trainPrestige)
summary(lm2)
# 预测值和残差图
plot(lm2$fitted, lm2$residuals)
# 残差索引图
plot(lm2$residuals, pch=19)
predict2 <- predict(lm2, newdata = testPrestige)
cor(predict2, testPrestige$prestige)
qqnorm(rs)
rs <- residuals(lm2)
qqnorm(rs)
qqline(rs)
plot(testPrestige$prestige, predict2, pch=c(testPrestige$type))
legend('toplfet', legend=c("bc", "prof", "wc"), pch=c(1,2,3), bty="o")
legend('topleft', legend=c("bc", "prof", "wc"), pch=c(1,2,3), bty="o")
library(MASS)
data("Boston")
names(Boston)
fit_d1 <- lm(nox~dis, data=Boston)
summary(fit_d1)
plot(Boston$dis, Boston$nox)
lines(Boston$dis, fit_d1$fitted, col=2, lwd=3)
fit_d2 <- lm(nx~ploy(dis,2, raw=TRUE), data=Boston)
summary(fit_d2)
plot(Boston$dis, Boston$nox)
lines(sort(Boston$dis), fit_d2$fitted.values[order(Boston$dis)], col=2, lwd=3)
lines(sort(Boston$dis), fit_d2$fitted.values[order(Boston$dis)], col=2, lwd=3)
fit_d2 <- lm(nx~ploy(dis,2, raw=TRUE), data=Boston)
fit_d2 <- lm(nox~ploy(dis,2, raw=TRUE), data=Boston)
summary(fit_d2)
plot(Boston$dis, Boston$nox)
lines(sort(Boston$dis), fit_d2$fitted.values[order(Boston$dis)], col=2, lwd=3)
fit_d2 <- lm(nox~ploy(dis,2, raw=TRUE), data=Boston)
fit_d2 <- lm(nox~poly(dis,2, raw=TRUE), data=Boston)
summary(fit_d2)
plot(Boston$dis, Boston$nox)
lines(sort(Boston$dis), fit_d2$fitted.values[order(Boston$dis)], col=2, lwd=3)
fit_d3 <- lm(nox~poly(dis,3, raw=TRUE), data=Boston)
summary(fit_d3)
plot(Boston$dis, Boston$nox)
lines(sort(Boston$dis), fit_d3$fitted.values[order(Boston$dis)], col=2, lwd=3)
# anova 比较三个模型的假设校验， 方差分析用于测试模型是否有效解释数据
anova(fit_d1,fit_d2, fit_d3)
setwd("~/Documents/Workspace/R/分类")
install.packages("kernlab")
library(kernlab)
# 垃圾邮件
data("spam")
plot(density(spam$charDollar[spam$type== "nonspam"]),lwd=0.5,
main="", xlab="Frequency of  '$' in E-mail")
lines(density(spam$charDollar[spam$type == 'spam']), lwd=3)
abline(v=0.125, col="black")
legend(1.5, 20, legend = c("Spam", "Nonspam"),lwd=c(3,0.5), lty=1)
spam_classifier <- ifelse(spam$charDollar > 0.125, "spam", "nonspam")
table(spam_classifier, spam$type)/nrow(spam)
data("iris")
n <- nrow(iris)
ntrain <- round(n*0.6)
set.seed(333)
tindex <- sample(n, ntrain)
train_iris <- iris[tindex,]
test_iris <- iris[-tindex,]
newcol <- data.frame(isVersicolor=(train_iris$Species=="versicolor"))
train_iris <- cbind(train_iris, newcol)
head(train_iris)
glm1 <- glm(isVersicolor~Sepal.Width, data=train_iris, family=binomial)
summary(glm1)
plot(train_iris$Sepal.Width, train_iris$isVersicolor)
curve(predict(glm1, data.frame(Sepal.Width=x), type="response"), add=TRUE)
newdata <- data.frame(Sepal.Width=2.4)
predict(glm1, newdata, type="response")
formula <- isVersicolor~Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
glm2 <- glm(formula,data = train_iris, family = "binomial")
summary(glm2)
coef(glm2)
summary(glm2)$coef
prob <- predict(glm2, newdata=test_iris, type="response")
round(prob, 3)
install.packages("tree")
library(tree)
install.packages("tree")
library("tree")
data("iris")
n <- nrow(iris)
ntrain <- round(n*0.6)
set.seed(333)
tindex <- sample(n, ntrain)
train_iris <- iris[tindex,]
test_iris <- iris[-tindex,]
newcol <- data.frame(isVersicolor=(train_iris$Species=="versicolor"))
train_iris <- cbind(train_iris, newcol)
head(train_iris)
str(train_iris)
ct1 <- tree(Species~., data=train_iris)
install.packages("tree")
installed.packages()
